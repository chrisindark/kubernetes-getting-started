apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-create-cms
  namespace: default
  uid: 27e8a4f7-8ec2-4ce7-96c9-187b4ac6e905
  resourceVersion: "144625670"
  generation: 1
  creationTimestamp: "2022-03-07T12:26:58Z"
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: mysql-create-cms
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    argocd.argoproj.io/instance: mysql-create-cms
    helm.sh/chart: mysql-8.8.26
status:
  observedGeneration: 1
  replicas: 1
  readyReplicas: 1
  currentReplicas: 1
  updatedReplicas: 1
  currentRevision: mysql-create-cms-786d77db67
  updateRevision: mysql-create-cms-786d77db67
  collisionCount: 0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: mysql-create-cms
      app.kubernetes.io/name: mysql
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: mysql-create-cms
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        helm.sh/chart: mysql-8.8.26
    spec:
      volumes:
        - name: config
          configMap:
            name: mysql-create-cms
            defaultMode: 420
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.28-debian-10-r23
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-create-cms
                  key: mysql-root-password
            - name: MYSQL_USER
              value: trell
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-create-cms
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: cmsDB
          resources:
            limits:
              cpu: "2"
              memory: 2000Mi
            requests:
              cpu: 500m
              memory: 2000Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - "-ec"
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - "-ec"
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            exec:
              command:
                - /bin/bash
                - "-ec"
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
        - name: metrics
          image: docker.io/bitnami/mysqld-exporter:0.13.0-debian-10-r256
          command:
            - /bin/bash
            - "-ec"
            - >
              password_aux="${MYSQL_ROOT_PASSWORD:-}"

              if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                  password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
              fi

              DATA_SOURCE_NAME="root:${password_aux}@(localhost:3306)/"
              /bin/mysqld_exporter
          ports:
            - name: metrics
              containerPort: 9104
              protocol: TCP
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-create-cms
                  key: mysql-root-password
          resources: {}
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 120
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: mysql-create-cms
      serviceAccount: mysql-create-cms
      securityContext:
        fsGroup: 1001
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - db
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: primary
                    app.kubernetes.io/instance: mysql-create-cms
                    app.kubernetes.io/name: mysql
                namespaces:
                  - database
                topologyKey: kubernetes.io/hostname
      schedulerName: default-scheduler
      tolerations:
        - key: db
          value: "true"
          effect: NoSchedule
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: primary
          app.kubernetes.io/instance: mysql-create-cms
          app.kubernetes.io/name: mysql
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: mysql-create-cms
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
